package br.com.hst.client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

import br.com.hst.client.constants.MenuConstants;

public class RequestHandler {
	
	private Socket client;

	public RequestHandler(Socket client) {
		this.client = client;
	}

	protected synchronized void startReceiveThread(DataInputStream dis, DataOutputStream dos) {
		Thread t = new Thread(new Runnable() {
			@Override
			synchronized public void run() {
				while (true) {
					try {						
						String opcao = dis.readUTF();
						switch (opcao) {
						case MenuConstants.MENU:
							showMenu();
							break;
						case MenuConstants.LIST_USERS:
							receiveUsersList(dis);
							break;
						case "2":
							receiveMessage(dis);
							break;
						case MenuConstants.RECEIVE_FILE:
							receiveFile(dis);
							showMenu();
							break;
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}

			private void showMenu() {
				System.out.println("\n======= Escolha uma operação =======\n" 
						+ "  1 - Visualizar Usuários Online\r\n"
						+ "  2 - Enviar mensagem\r\n" 
						+ "  3 - Enviar arquivos\r\n" 
						+ "  4 - Sair\n"
						+ "====================================");
			}
		});
		t.start();
	}

	protected synchronized void startInputThread(DataInputStream dis, DataOutputStream dos) {

		Thread t = new Thread(new Runnable() {

			@Override
			synchronized public void run() {
				while (true) {
					Scanner sc = new Scanner(System.in);
					int option = sc.nextInt();
					try {
						dos.writeInt(option);
						switch (option) {
						case 2:
							sendMessage(dos);
							break;
						case 3:
							sendFile(dos);
							break;
						case 4:
							closeConnection(dis);
							break;
						}
					} catch (IOException e) {
						e.printStackTrace();
					}

				}
			}			
		});
		t.start();
	}
	
	private void sendMessage(DataOutputStream dos) {
		try {
			Scanner sc = new Scanner(System.in);
			System.out.println("Digite o nome do destinatário: ");
			String target = sc.next();
			dos.writeUTF(target);			
			String message = "";
			System.out.print("> Para: " + target + ":");		
			
			while(!message.equals("!exit")) {					
				message = sc.nextLine();
				if(!message.isBlank() && !message.isBlank()) {
					dos.writeUTF(message);
					System.out.print("> Para " + target + ": ");
				}				
			}			
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}

	private void sendFile(DataOutputStream dos) {
		FileInputStream fis = null;
		try {

			Scanner sc = new Scanner(System.in);
			System.out.println("Digite o nome do destinatário: ");
			String target = sc.next();
			dos.writeUTF(target);

			System.out.println("Digite o nome do Arquivo: ");
			String filename = sc.next();

			fis = new FileInputStream(new File(filename));
			int fileSize = fis.available();

			dos.writeUTF(filename);
			dos.writeInt(fileSize);

			int bufferSize = fileSize < 4096 ? fileSize : 4096;
			byte[] buffer = new byte[bufferSize];

			int remaining = fileSize;
			while (remaining > 0) {
				fis.read(buffer);
				if (remaining < bufferSize) {
					byte[] bufferOld = buffer;
					buffer = new byte[remaining];
					System.arraycopy(bufferOld, 0, buffer, 0, buffer.length);
				}
				dos.write(buffer);
				remaining -= buffer.length;
			}
			System.out.println("\nArquivo " + filename + " enviado para " + target);
		} catch (IOException e) {
			System.out.println("Falha ao enviar arquivo");
		}
	}

	private void receiveFile(DataInputStream dis) {
		FileOutputStream fos = null;
		try {
			String filename = dis.readUTF();
			System.out.println("Arquivo recebido: " + filename);
			int fileSize = dis.readInt();
			System.out.println("Tamanho do arquivo: " + fileSize);

			Path path = Paths.get("out" + File.separator + filename);
			if (!Files.exists(path.getParent())) {
				Files.createDirectory(path.getParent());
				Files.createFile(path);
			}

			fos = new FileOutputStream(path.toFile());

			int bufferSize = fileSize < 4096 ? fileSize : 4096;
			byte[] buffer = new byte[bufferSize];
			int remaining = fileSize;
			while (remaining > 0) {
				dis.read(buffer);
				if (remaining < bufferSize) {
					byte[] bufferOld = buffer;
					buffer = new byte[remaining];
					System.arraycopy(bufferOld, 0, buffer, 0, buffer.length);
				}
				fos.write(buffer);
				remaining -= buffer.length;
			}
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Falha ao obter arquivo");
		} finally {
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
				}
			}
		}
	}
	
	protected void receiveMessage(DataInputStream dis) {
		try {
			String message = dis.readUTF();
			System.out.println(message);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	protected void receiveUsersList(DataInputStream dis) throws IOException {
		int num = dis.readInt();
		System.out.println("\nQuantidade de Usuários: " + num);
		for (int i = 0; i < num; i++) {
			String users = dis.readUTF();
			System.out.println(users);
		}
	}
}